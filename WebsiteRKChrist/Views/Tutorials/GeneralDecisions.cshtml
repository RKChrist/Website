@{
    Layout = "_Subpages";
}
<style type="text/css">
    ol {
        margin: 0;
        padding: 0
    }

    table td, table th {
        padding: 0
    }

    .c12 {
        background-color: #303134;
        color: #e8eaed;
        font-weight: 400;
        text-decoration: none;
        vertical-align: baseline;
        font-size: 21pt;
        font-family: "Arial";
        font-style: normal
    }

    .c0 {
        color: #000000;
        font-weight: 400;
        text-decoration: none;
        vertical-align: baseline;
        font-size: 11pt;
        font-family: "Arial";
        font-style: normal
    }

    .c3 {
        padding-top: 0pt;
        padding-bottom: 0pt;
        line-height: 1.15;
        orphans: 2;
        widows: 2;
        text-align: left;
        height: 11pt
    }

    .c6 {
        padding-top: 20pt;
        padding-bottom: 6pt;
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    .c14 {
        color: #000000;
        font-weight: 400;
        text-decoration: none;
        vertical-align: baseline;
        font-size: 11pt;
        font-family: "Arial";
        font-style: italic
    }

    .c8 {
        padding-top: 0pt;
        padding-bottom: 0pt;
        line-height: 1.15;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    .c5 {
        color: #000000;
        font-weight: 400;
        text-decoration: none;
        vertical-align: baseline;
        font-family: "Arial";
        font-style: normal
    }

    .c2 {
        padding-top: 0pt;
        padding-bottom: 0pt;
        line-height: 1.15;
        orphans: 2;
        widows: 2;
        text-align: center
    }

    .c10 {
        text-decoration-skip-ink: none;
        -webkit-text-decoration-skip: none;
        color: #1155cc;
        text-decoration: underline
    }

    .c4 {
        background-color: #ffffff;
        max-width: 451.4pt;
        padding: 72pt 72pt 72pt 72pt
    }

    .c13 {
        background-color: #ffffff;
        font-style: italic;
        color: #707070
    }

    .c11 {
        color: inherit;
        text-decoration: inherit
    }

    .c1 {
        font-size: 12pt
    }

    .c7 {
        font-weight: 700
    }

    .c9 {
        font-size: 20pt
    }

    .title {
        padding-top: 0pt;
        color: #000000;
        font-size: 26pt;
        padding-bottom: 3pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    .subtitle {
        padding-top: 0pt;
        color: #666666;
        font-size: 15pt;
        padding-bottom: 16pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    li {
        color: #000000;
        font-size: 11pt;
        font-family: "Arial"
    }

    p {
        margin: 0;
        color: #000000;
        font-size: 11pt;
        font-family: "Arial"
    }

    h1 {
        padding-top: 20pt;
        color: #000000;
        font-size: 20pt;
        padding-bottom: 6pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    h2 {
        padding-top: 18pt;
        color: #000000;
        font-size: 16pt;
        padding-bottom: 6pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    h3 {
        padding-top: 16pt;
        color: #434343;
        font-size: 14pt;
        padding-bottom: 4pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    h4 {
        padding-top: 14pt;
        color: #666666;
        font-size: 12pt;
        padding-bottom: 4pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    h5 {
        padding-top: 12pt;
        color: #666666;
        font-size: 11pt;
        padding-bottom: 4pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        orphans: 2;
        widows: 2;
        text-align: left
    }

    h6 {
        padding-top: 12pt;
        color: #666666;
        font-size: 11pt;
        padding-bottom: 4pt;
        font-family: "Arial";
        line-height: 1.15;
        page-break-after: avoid;
        font-style: italic;
        orphans: 2;
        widows: 2;
        text-align: left
    }
</style>
<div class="c4">
    <p class="c3"><span class="c0"></span></p><p class="c3"><span class="c0"></span></p><h1 class="c6" id="h.g0e1bnrigcfz"><span class="c5 c9">Data dump vs Data storage</span></h1><p class="c8"><span>Selvom en data lake er et centraliseret repository for hele organisationens data, s&aring; skal man stadig s&oslash;rge for at holde den ren ellers bliver den en data swamp.</span></p><p class="c3"><span class="c0"></span></p><h1 class="c6" id="h.6ois9kyz8vl8"><span class="c5 c9">Tiered storage</span></h1><p class="c8"><span class="c1">Tiered storage is as </span><span class="c1 c10"><a class="c11" href="https://www.google.com/url?q=https://www.druva.com/glossary/what-is-tiered-storage-definition-and-related-faqs/&amp;sa=D&amp;source=editors&amp;ust=1655206093394764&amp;usg=AOvVaw3TbsdShVBwWLgfDy6tAmBt">druva.com</a></span><span class="c1">&nbsp;defines it:</span><span class="c0"><br></span></p><p class="c2"><span class="c13 c1">&ldquo;</span><span class="c1 c13">Tiered storage is a system or method for assigning data to various types of storage media based on a range of requirements for cost, availability, performance, and recovery.&rdquo;</span></p><p class="c3"><span class="c5 c1"></span></p><p class="c8"><span class="c1">Depending on the data usage, cost, availability etc. of the Data Lake you should have different kinds of storage or services to handle your assigned data.</span></p><p class="c3"><span class="c1 c5"></span></p><p class="c8"><span>Jeg </span><span class="c0">kommer ikke til at beskrive om tiered storage. Men med hensyn til Data Lake er det noget, du b&oslash;r overveje. Da tiered storage er noget, som mange platforme tilbyder, og afh&aelig;ngigt af brugen af &#8203;&#8203;den specifikke del af Data Lake, kan den administrere omkostningerne for hele s&oslash;en som helhed afh&aelig;ngigt af delens BI (Business Intelligence). Da de fleste af tjenesterne er pay as you go. S&aring; jo mere du bruger tjenesten, jo mere betaler du.</span></p><p class="c8"><span class="c0">N&aring;r du designer s&oslash;en, b&oslash;r du pr&oslash;ve at lave segmenter der ikke bliver brugt s&aring; meget, bruge forskellige databasetjenester, platforme, datastyringssystemer osv., da afh&aelig;ngigt af dataudtr&aelig;kket og data transformationen af &#8203;&#8203;det specifikke segment, kan du &aelig;ndre omkostningerne ved disse tjenester. Da de fleste ikke har r&aring;d til den dyreste pakke hos AWS eller google, og generelt set beh&oslash;ver man heller ikke s&aring; meget lagerplads. Det er derfor, afh&aelig;ngigt af data lakens behov, b&oslash;r du v&aelig;lge en anden mulighed. Og for ikke at bekymre dig, s&aring; er s&oslash;enligeglad med, om du har masser og masser af tjenester i s&oslash;en. Bare s&oslash;rg for at lave et overblik over de forskellige tjenester, og hvordan de interagerer, for at sikre dig, at du bruger disse tjenester til det bedste af deres muligheder.</span></p><p class="c3"><span class="c5 c1"></span></p><p class="c3"><span class="c0"></span></p><h1 class="c6" id="h.wzm4ysam09ry"><span class="c5 c9">Object Storage</span></h1><p class="c8"><span>En </span><span class="c7">Data Lake</span><span>&nbsp;er normalt oprettet ved hj&aelig;lp af </span><span class="c7">object-based storage</span><span class="c0">. Da s&oslash;en er noget, du normalt bare dumper dine data ind i, og n&aring;r det er i s&oslash;en, behandler og analyserer du det til det specifikke form&aring;l, du har brug for dataen til. Da du bare indl&aelig;ser dine data &eacute;t sted og ikke beh&oslash;ver yderligere segmentering eller struktur, gemmer du dem ved hj&aelig;lp af object-based storage. Da du i object-based storage gemmer det bare som et objekt med specifikke metadata for at kunne hente filen igen. Metadata som filnavn, ID, fildata osv.</span></p><p class="c8"><span class="c0">Dette er illustreret af datacore p&aring; f&oslash;lgende billede:</span></p><p class="c3"><span class="c5 c1"></span></p><p class="c8"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 316.00px;"><img alt="" src="~/images/data/image2.png" style="width: 601.70px; height: 316.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c3"><span class="c0"></span></p><p class="c8"><span class="c0">I mods&aelig;tning til filbaseret storage, hvor alting er arkiveret i et mappe-hierarki.</span></p><p class="c3"><span class="c0"></span></p><h1 class="c6" id="h.1ae761sits0n"><span class="c5 c9">Batch vs Stream</span></h1><p class="c8"><span class="c0">N&aring;r man skal igang med at konstruerer en data lake, s&aring; er man n&oslash;dt til at t&aelig;nke over det data der kommer ind i s&oslash;en. For n&aring;r man skal v&aelig;lge streaming metoder, s&aring; er Stream data hurtigere. Da stream er fokuseret p&aring; realtid eller t&aelig;t p&aring; realtid. Hvor batch er det stik modsatte. Valget af streaming metoder kommer an p&aring; hvor hurtigt dataen skal komme ned i s&oslash;en. Vil du helst have en b&oslash;lge af data p&aring; en gang eller vil du have en stille og rolig str&oslash;m af data?</span></p><p class="c8"><span class="c0">I mange tilf&aelig;lde vil du konstruerer en data lake med begge former for streaming. Da meget af data ikke bliver brugt i realtime, men det er noget man vil gemme til senere. Et eksempel p&aring; dette kunne v&aelig;re pdf&rsquo;er til forsker analyser. Da disse pdf&rsquo;er er vigtige at gemme, men data-en er ikke brugbar i realtime. Hvorimod brugerdata i forhold til hvordan de opererer p&aring; ens hjemmeside kan v&aelig;re brugbar i realtime i forhold til statistisk analyse. Dette er ydeligere fremvist i nedenst&aring;ende billede:</span></p><p class="c8"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 386.67px;"><img alt="" src="~/images/Data/image3.png" style="width: 601.70px; height: 386.67px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c3"><span class="c0"></span></p>

</div>